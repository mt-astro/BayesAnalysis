# i think pbeta returns cdf up until x
gt_05 = 1.0 - pbeta(0.5, a, b)
lt_75 = pbeta(0.75, a, b)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
gt_05 = 1.0 - pbeta(0.5, a, b)
lt_75 = pbeta(0.75, a, b)
diff = lt_75 - pbeta(0.5, a, b)
print(diff)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
gt_05 = 1.0 - pbeta(0.5, a, b)
lt_75 = pbeta(0.75, a, b)
diff = lt_75 - pbeta(0.5, a, b)
print(diff*lt_75/(gt_05))
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
cdf5 = 1.0 - pbeta(0.5, a, b) / pbeta(0.75, a, b)
print(cdf5)
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5) = 1-
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
rm(list=ls()) # clean up
library(knitr)
gr <- (1+sqrt(5))/2 # golden ratio, for figures
opts_chunk$set(comment="  ",
collapse=TRUE,
#echo=FALSE,
fig.asp=1/gr,
dev="png"
)
options(digits=3)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
cdf5 = 1.0 - pbeta(0.5, a, b) / pbeta(0.75, a, b)
print(cdf5)
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5) = 1-
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(P_BA)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(P_BA)
print(P_A)
print(P_B)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print(P_BA)
print(P_A)
print(P_B)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print(P_BA)
print(P_A)
print(P_B)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print(P_BA)
print(P_A)
print(P_B)
print(P_A/P_B)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print(P_BA)
print(P_A)
print(P_B)
print(P_B/P_A)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print(P_BA)
print(P_A)
print(P_B)
print(P_A/P_B)
print( P_BA * P_A / P_B)
0.824/0.329
0.824*0.329
print( P_BA * P_B / P_A)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print( P_BA * P_A / P_B)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
print(frac1)
print( P_BA * P_B / P_A)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
#hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
#put it all together
P_AB = P_BA * P_B / P_A
print(P_AB)
dmb = function(x, a=1,b=1,Ni=301) {
_b = b-1
dmb = function(x, a=1,b=1,Ni=301) {
b0 = b-1
}
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / trap(x, res)
return(res)
}
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / trap(x, res)
return(res)
}
plot(dmb(seq(0, 1, by=0.01)))
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
plot(dmb(seq(0, 1, by=0.01)))
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
plot(dmb(seq(0, 1, by=0.01), 3, 4))
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
x = seq(0, 1, by=0.01)
a = 2
b = 4
myvals = dmb(x, a, b)
rvals = dbeta(x, a, b)
plot(rvals, myvals)
?lm
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
x = seq(0, 1, by=0.01)
a = 2
b = 4
myvals = dmb(x, a, b)
rvals = dbeta(x, a, b)
fit = lm(myvals, rvals)
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
x = seq(0, 1, by=0.01)
a = 2
b = 4
myvals = dmb(x, a, b)
rvals = dbeta(x, a, b)
fit = lm(myvals ~ rvals)
plot(rvals, myvals)
hist(fit.residuals)
?lm
fit
fit$residuals
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
x = seq(0, 1, by=0.01)
a = 2
b = 4
myvals = dmb(x, a, b)
rvals = dbeta(x, a, b)
fit = lm(myvals ~ rvals)
plot(rvals, myvals)
hist(fit$residuals)
# not sure why you need Ni...
trap <- function(x,y)  # integral of y from x[1] to x[length(x)]
sum( diff(x)*0.5*( y[-1] + y[-length(y)] ) )
dmb = function(x, a=1,b=1,Ni=301) {
a0 = a-1
b0 = b-1
res = (x**a0) * ((1-x)**b0)
res = res / sum(res)
return(res)
}
x = seq(0, 1, by=0.01)
a = 2
b = 4
myvals = dmb(x, a, b)
rvals = dbeta(x, a, b)
fit = lm(myvals ~ rvals)
plot(rvals, myvals)
hist(fit$residuals)
rm(list=ls()) # clean up
library(knitr)
gr <- (1+sqrt(5))/2 # golden ratio, for figures
opts_chunk$set(comment="  ",
collapse=TRUE,
#echo=FALSE,
fig.asp=1/gr,
dev="png"
)
options(digits=3)
# a) make samples
set.seed(123)
Nsample = 2000
a = 2
b = 3
samples = rbeta(Nsample, a, b)
hist(samples, 25,plot=TRUE)
#b) find samples between 0.5 and 0.75
idx0 = samples > 0.5
idx1 = samples > 0.5 & samples < 0.75
frac1 = sum(idx1) / sum(idx0)
#c) check against pbeta
# i think pbeta returns cdf up until x
# via bayes rule, P(A|B) = P(B|A)*P(A)/P(B)
# P(B|A) = P(theta > 0.5 | theta < 0.75) = pbeta(0.75,a,b) - pbeta(0.5,a,b)
P_BA = 1.0 - ( pbeta(0.5, a, b) / pbeta(0.75, a, b) )
# P(A) = P(theta > 0.5) = 1.0 - P(theta < 0.5)
P_A = 1.0 - pbeta(0.5, a, b)
# P(B) = P(theta < 0.75) = pbeta(0.75, a, b)
P_B = pbeta(0.75, a, b)
#put it all together
P_AB = P_BA * P_B / P_A
