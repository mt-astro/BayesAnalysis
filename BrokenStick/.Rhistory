## or attr(zz, "names") <- NULL
unname(zz) # 2 -1 5
## Give zz another attribute called "species"
attr(zz, "species") <- "cat"
attr(zz, "species")    # "cat"
attributes(zz)$species # "cat"
attributes(zz)$names   # "a" "c" "b"
## A list is a vector. We name its elements the same way.
zz <- list(2, "rats", TRUE)
attr(zz, "names") <- c("a", "c", "b")
attr(zz, "names") # "a" "c" "b"
attr(zz, "genus") <- "rodent"
attr(zz, "genus") # "rodent"
attributes(zz)$names # "a" "c" "b"
attributes(zz)$genus # "rodent"
zz
rm(zz)
## subsetting mcmc.list objects
class(chains) # mcmc.list
varnames(chains) # "cp"   "a1"   "b1"   "b2"   "lnsy" "sy"
class(chains[,"cp"]) # mcmc.list
class(chains[, c("b1","b2")]) # mcmc.list
## subsetting mcmc objects
class(chains[[2]]) # mcmc
varnames(chains[[2]]) # "cp"   "a1"   "b1"   "b2"   "lnsy" "sy"
class(chains[[2]][,"cp"]) # mcmc
class(chains[[2]][,c("b1", "b2")]) # mcmc
zz <- letters
zz[4] # "d"
`[`( zz, 4 ) # "d"
zz[c(3, 5)] # "c" "e"
`[`(zz, c(3,5))
class( chains[, "cp"]      )  # mcmc.list
class( chains[[1]][, "cp"] )  # mcmc
## chains has class mcmc.list
## chains[[1]] has class mcmc
head(as.matrix(chains[[1]])) # Each row is a sample
dim(as.matrix(chains[[1]]))
head(as.matrix(chains))      # Each row is a sample
dim(as.matrix(chains))
t
a1
xbar
xbar = mean(x)
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nx = length(xx)
a1
f
f(tt, a1, b1, b2)
f(tt, cp, a1, b1, b2)
jq1
f(7., cp, a1, b1, b2)
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,ix] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,ix] <- postmu[jq2] # 97.5 percentile for a + bx
}
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(x,y,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(t,y,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
lines(x=xx, y=eti[1,], lty=2, col="red") # 2.5  percentile
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
legend("topleft", pch=c(1, NA),
col=c("black","red"), lty=c(3,2),
legend=c("data", "95% CI"),
inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nx) # storage
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
legend("topleft", pch=c(1, NA),
col=c("black","red"), lty=c(3,2),
legend=c("data", "95% CI"),
inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- a + b*(xx[ix] - xbar) # means
sd <- samples[,"sigma"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,ix] <- ppy[jq1] #  2.5 percentile
etpp[2,ix] <- ppy[jq2] # 97.5 percentile
}
samples
samples[,'sigma']
samples[,'sigma"]
samples[,'sigma']
samples[,'sigma']
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
legend("topleft", pch=c(1, NA),
col=c("black","red"), lty=c(3,2),
legend=c("data", "95% CI"),
inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- f(tt[it], cp, a1, b1, b2) # means
sd <- samples[,"sy"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,ix] <- ppy[jq1] #  2.5 percentile
etpp[2,ix] <- ppy[jq2] # 97.5 percentile
}
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
## plot 95% posterior CI's for a + bx
par(mar=c(4.1,4.1,1,2)) # margin control
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0)) # data
lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
legend("topleft", pch=c(1, NA),
col=c("black","red"), lty=c(3,2),
legend=c("data", "95% CI"),
inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- f(tt[it], cp, a1, b1, b2) # means
sd <- samples[,"sy"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,it] <- ppy[jq1] #  2.5 percentile
etpp[2,it] <- ppy[jq2] # 97.5 percentile
}
## plot everything
par(mar=c(4.1,4.1,1,2))
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-3.0, 8.0))
lines(x=tt, y= eti[1,], lty=2, col="red"    )
lines(x=tt, y= eti[2,], lty=2, col="red"    )
lines(x=tt, y=etpp[1,], lty=2, col="magenta")
lines(x=tt, y=etpp[2,], lty=2, col="magenta")
legend("topleft", inset=0.02, bty="n",
pch=c(1,NA,NA),
col=c("black","red","magenta"),
lty=c(3,2,2),
legend=c("data", "95% posterior CI", "95% posterior predictive CI")
)
#taken from the JAGSexample.Rmd and modified as necessary
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
# seemed redundant, decided to omit
## plot 95% posterior CI's for a + bx
#par(mar=c(4.1,4.1,1,2)) # margin control
#plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-3.0, 8.0)) # data
#lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
#lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
#legend("topleft", pch=c(1, NA),
#       col=c("black","red"), lty=c(3,2),
#       legend=c("data", "95% CI"),
#       inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- f(tt[it], cp, a1, b1, b2) # means
sd <- samples[,"sy"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,it] <- ppy[jq1] #  2.5 percentile
etpp[2,it] <- ppy[jq2] # 97.5 percentile
}
## plot everything
par(mar=c(4.1,4.1,1,2))
plot(t,yo,type="b", lty=3, xlim=c(0.0, 6.0), ylim=c(-2.0, 4.0))
lines(x=tt, y= eti[1,], lty=2, col="red"    )
lines(x=tt, y= eti[2,], lty=2, col="red"    )
lines(x=tt, y=etpp[1,], lty=2, col="magenta")
lines(x=tt, y=etpp[2,], lty=2, col="magenta")
legend("topleft", inset=0.02, bty="n",
pch=c(1,NA,NA),
col=c("black","red","magenta"),
lty=c(3,2,2),
legend=c("data", "95% posterior CI", "95% posterior predictive CI")
)
#taken from the JAGSexample.Rmd and modified as necessary
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
# seemed redundant, decided to omit
## plot 95% posterior CI's for a + bx
#par(mar=c(4.1,4.1,1,2)) # margin control
#plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-3.0, 8.0)) # data
#lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
#lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
#legend("topleft", pch=c(1, NA),
#       col=c("black","red"), lty=c(3,2),
#       legend=c("data", "95% CI"),
#       inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- f(tt[it], cp, a1, b1, b2) # means
sd <- samples[,"sy"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,it] <- ppy[jq1] #  2.5 percentile
etpp[2,it] <- ppy[jq2] # 97.5 percentile
}
## plot everything
par(mar=c(4.1,4.1,1,2))
plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-2.0, 4.0))
lines(x=tt, y= eti[1,], lty=2, col="red"    )
lines(x=tt, y= eti[2,], lty=2, col="red"    )
lines(x=tt, y=etpp[1,], lty=2, col="magenta")
lines(x=tt, y=etpp[2,], lty=2, col="magenta")
legend("topleft", inset=0.02, bty="n",
pch=c(1,NA,NA),
col=c("black","red","magenta"),
lty=c(3,2,2),
legend=c("data", "95% posterior CI", "95% posterior predictive CI")
)
#taken from the JAGSexample.Rmd and modified as necessary
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
# seemed redundant, decided to omit
## plot 95% posterior CI's for a + bx
#par(mar=c(4.1,4.1,1,2)) # margin control
#plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-3.0, 8.0)) # data
#lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
#lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
#legend("topleft", pch=c(1, NA),
#       col=c("black","red"), lty=c(3,2),
#       legend=c("data", "95% CI"),
#       inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- f(tt[it], cp, a1, b1, b2) # means
sd <- samples[,"sy"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,it] <- ppy[jq1] #  2.5 percentile
etpp[2,it] <- ppy[jq2] # 97.5 percentile
}
## plot everything
par(mar=c(4.1,4.1,1,2))
plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-2.0, 8.0))
lines(x=tt, y= eti[1,], lty=2, col="red"    )
lines(x=tt, y= eti[2,], lty=2, col="red"    )
lines(x=tt, y=etpp[1,], lty=2, col="magenta")
lines(x=tt, y=etpp[2,], lty=2, col="magenta")
legend("topleft", inset=0.02, bty="n",
pch=c(1,NA,NA),
col=c("black","red","magenta"),
lty=c(3,2,2),
legend=c("data", "95% posterior CI", "95% posterior predictive CI")
)
#taken from the JAGSexample.Rmd and modified as necessary
samples = as.matrix(chains) # unpack results
cp = samples[,"cp"]
a1 = samples[,"a1"]
b1 = samples[,"b1" ]
b2 = samples[, "b2"]
lnsy = samples[,"lnsy"]
sy = samples[, 'sy']
nn <- length(a1)
tt = seq(0., 10., by=0.1)
nt = length(tt)
eti = matrix(0,nrow=2,ncol=nt) # matrix of equal-tailed intervals
jq1 <- floor(0.025*nn)          # index of  2.5 percentile
jq2 <- ceiling(0.975*nn)        # index of 97.5 percentile
for(it in 1:nt) {
postmu <- f(tt[it], cp, a1, b1, b2)
postmu <- sort(postmu)
eti[1,it] <- postmu[jq1] # 2.5  percentile for a + bx
eti[2,it] <- postmu[jq2] # 97.5 percentile for a + bx
}
# seemed redundant, decided to omit
## plot 95% posterior CI's for a + bx
#par(mar=c(4.1,4.1,1,2)) # margin control
#plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-3.0, 8.0)) # data
#lines(x=tt, y=eti[1,], lty=2, col="red") # 2.5  percentile
#lines(x=tt, y=eti[2,], lty=2, col="red") # 97.5 percentile
#legend("topleft", pch=c(1, NA),
#       col=c("black","red"), lty=c(3,2),
#       legend=c("data", "95% CI"),
#       inset=0.05, bty="n")
etpp <- matrix(0,nrow=2,ncol=nt) # storage
for(it in 1:nt){ # x's for prediction
postmu <- f(tt[it], cp, a1, b1, b2) # means
sd <- samples[,"sy"] # sd's
ppy <- rnorm(nn, mean=postmu, sd=sd) # post-pred samples of a+bx
ppy <- sort(ppy) # sort em to find the equal-tailed intervals
etpp[1,it] <- ppy[jq1] #  2.5 percentile
etpp[2,it] <- ppy[jq2] # 97.5 percentile
}
## plot everything
par(mar=c(4.1,4.1,1,2))
plot(t,yo,type="b", lty=3, xlim=c(0.0, 10.0), ylim=c(-2.0, 7.0))
lines(x=tt, y= eti[1,], lty=2, col="red"    )
lines(x=tt, y= eti[2,], lty=2, col="red"    )
lines(x=tt, y=etpp[1,], lty=2, col="magenta")
lines(x=tt, y=etpp[2,], lty=2, col="magenta")
legend("topleft", inset=0.02, bty="n",
pch=c(1,NA,NA),
col=c("black","red","magenta"),
lty=c(3,2,2),
legend=c("data", "95% posterior CI", "95% posterior predictive CI")
)
